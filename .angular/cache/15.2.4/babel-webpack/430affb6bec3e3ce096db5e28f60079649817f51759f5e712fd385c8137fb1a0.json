{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, retry, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookAPIService {\n  constructor(_http) {\n    this._http = _http;\n  }\n  getBooks() {\n    const headers = new HttpHeaders().set('Content-Type', 'text/plain;charset=utf- 8');\n    const requestOptions = {\n      headers: headers,\n      responseType: 'text'\n    };\n    return this._http.get('/books', requestOptions).pipe(map(res => JSON.parse(res)), retry(3), catchError(this.handleError));\n  }\n  handleError(error) {\n    return throwError(() => new Error(error.message));\n  }\n  getBook(bookId) {\n    const headers = new HttpHeaders().set('Content-Type', 'text/plain;charset=utf-8');\n    const requestOptions = {\n      headers: headers,\n      responseType: 'text'\n    };\n    return this._http.get('/books/' + bookId, requestOptions).pipe(map(res => JSON.parse(res)), retry(3), catchError(this.handleError));\n  }\n  sortBook(price) {\n    const headers = new HttpHeaders().set('Content-Type', 'text/plain;charset=utf-8');\n    const requestOptions = {\n      headers: headers,\n      responseType: 'text'\n    };\n    return this._http.get('/books/' + price, requestOptions).pipe(map(res => JSON.parse(res)), retry(3), catchError(this.handleError));\n  }\n}\nBookAPIService.ɵfac = function BookAPIService_Factory(t) {\n  return new (t || BookAPIService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookAPIService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookAPIService,\n  factory: BookAPIService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAGEA,WAAW,QACN,sBAAsB;AAC7B,SAASC,UAAU,EAAEC,GAAG,EAAcC,KAAK,EAAEC,UAAU,QAAQ,MAAM;;;AAOrE,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;EAAe;EAExCC,QAAQ;IACN,MAAMC,OAAO,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CACnC,cAAc,EACd,2BAA2B,CAC5B;IACD,MAAMC,cAAc,GAAW;MAAEF,OAAO,EAAEA,OAAO;MAAEG,YAAY,EAAE;IAAM,CAAE;IACzE,OAAO,IAAI,CAACL,KAAK,CAACM,GAAG,CAAM,QAAQ,EAAEF,cAAc,CAAC,CAACG,IAAI,CACvDZ,GAAG,CAAEa,GAAG,IAAKC,IAAI,CAACC,KAAK,CAACF,GAAG,CAAiB,CAAC,EAC7CZ,KAAK,CAAC,CAAC,CAAC,EACRF,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAC7B;EACH;EAEAA,WAAW,CAACC,KAAwB;IAClC,OAAOf,UAAU,CAAC,MAAM,IAAIgB,KAAK,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC;EACnD;EAEAC,OAAO,CAACC,MAAc;IACpB,MAAMd,OAAO,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CACnC,cAAc,EACd,0BAA0B,CAC3B;IACD,MAAMC,cAAc,GAAW;MAC7BF,OAAO,EAAEA,OAAO;MAChBG,YAAY,EAAE;KACf;IACD,OAAO,IAAI,CAACL,KAAK,CAACM,GAAG,CAAM,SAAS,GAAGU,MAAM,EAAEZ,cAAc,CAAC,CAACG,IAAI,CACjEZ,GAAG,CAAEa,GAAG,IAAKC,IAAI,CAACC,KAAK,CAACF,GAAG,CAAU,CAAC,EACtCZ,KAAK,CAAC,CAAC,CAAC,EACRF,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAC7B;EACH;EAEAM,QAAQ,CAACC,KAAa;IACpB,MAAMhB,OAAO,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CACnC,cAAc,EACd,0BAA0B,CAC3B;IACD,MAAMC,cAAc,GAAW;MAC7BF,OAAO,EAAEA,OAAO;MAChBG,YAAY,EAAE;KACf;IACD,OAAO,IAAI,CAACL,KAAK,CAACM,GAAG,CAAM,SAAS,GAAGY,KAAK,EAAEd,cAAc,CAAC,CAACG,IAAI,CAChEZ,GAAG,CAAEa,GAAG,IAAKC,IAAI,CAACC,KAAK,CAACF,GAAG,CAAU,CAAC,EACtCZ,KAAK,CAAC,CAAC,CAAC,EACRF,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAC7B;EACH;;AAlDWb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAqB,SAAdrB,cAAc;EAAAsB,YAFb;AAAM","names":["HttpHeaders","catchError","map","retry","throwError","BookAPIService","constructor","_http","getBooks","headers","set","requestOptions","responseType","get","pipe","res","JSON","parse","handleError","error","Error","message","getBook","bookId","sortBook","price","factory","providedIn"],"sourceRoot":"","sources":["D:\\HK6\\WEB_ADVANCED\\fromzero\\module5\\module5-app\\src\\app\\services\\book-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { catchError, map, Observable, retry, throwError } from 'rxjs';\n\nimport { Ibook } from '../interfaces/books';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BookAPIService {\n  constructor(private _http: HttpClient) {}\n\n  getBooks(): Observable<any> {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'text/plain;charset=utf- 8'\n    );\n    const requestOptions: Object = { headers: headers, responseType: 'text' };\n    return this._http.get<any>('/books', requestOptions).pipe(\n      map((res) => JSON.parse(res) as Array<Ibook>),\n      retry(3),\n      catchError(this.handleError)\n    );\n  }\n\n  handleError(error: HttpErrorResponse) {\n    return throwError(() => new Error(error.message));\n  }\n\n  getBook(bookId: string): Observable<any> {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'text/plain;charset=utf-8'\n    );\n    const requestOptions: Object = {\n      headers: headers,\n      responseType: 'text',\n    };\n    return this._http.get<any>('/books/' + bookId, requestOptions).pipe(\n      map((res) => JSON.parse(res) as Ibook),\n      retry(3),\n      catchError(this.handleError)\n    );\n  }\n\n  sortBook(price: string): Observable<any> {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'text/plain;charset=utf-8'\n    );\n    const requestOptions: Object = {\n      headers: headers,\n      responseType: 'text',\n    };\n    return this._http.get<any>('/books/' + price, requestOptions).pipe(\n      map((res) => JSON.parse(res) as Ibook),\n      retry(3),\n      catchError(this.handleError)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}